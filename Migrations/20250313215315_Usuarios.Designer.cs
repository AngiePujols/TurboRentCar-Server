// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechMaster.Context;

#nullable disable

namespace TurboRentCar.Migrations
{
    [DbContext(typeof(TurboRentContext))]
    [Migration("20250313215315_Usuarios")]
    partial class Usuarios
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TurboRentCar.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LimiteCredito")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NoTarjetaCredito")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TipoPersona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cliente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Pérez",
                            Cedula = "001-1234567-8",
                            Estado = "Activo",
                            LimiteCredito = 50000.00m,
                            NoTarjetaCredito = "1234-5678-1234-5678",
                            Nombre = "Juan",
                            TipoPersona = "Física"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Martínez",
                            Cedula = "002-2345678-9",
                            Estado = "Activo",
                            LimiteCredito = 75000.00m,
                            NoTarjetaCredito = "2345-6789-2345-6789",
                            Nombre = "María",
                            TipoPersona = "Física"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "González",
                            Cedula = "003-3456789-0",
                            Estado = "Activo",
                            LimiteCredito = 60000.00m,
                            NoTarjetaCredito = "3456-7890-3456-7890",
                            Nombre = "Pedro",
                            TipoPersona = "Física"
                        },
                        new
                        {
                            Id = 4,
                            Apellido = "Jiménez",
                            Cedula = "004-4567890-1",
                            Estado = "Activo",
                            LimiteCredito = 100000.00m,
                            NoTarjetaCredito = "4567-8901-4567-8901",
                            Nombre = "Ana",
                            TipoPersona = "Física"
                        },
                        new
                        {
                            Id = 5,
                            Apellido = "Rodríguez",
                            Cedula = "005-5678901-2",
                            Estado = "Activo",
                            LimiteCredito = 80000.00m,
                            NoTarjetaCredito = "5678-9012-5678-9012",
                            Nombre = "José",
                            TipoPersona = "Física"
                        });
                });

            modelBuilder.Entity("TurboRentCar.Entities.Empleados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("cedula")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fecha_contratacion")
                        .HasColumnType("date");

                    b.Property<DateTime>("fecha_nacimiento")
                        .HasColumnType("date");

                    b.Property<string>("foto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("porcentaje_comision")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("tanda_labor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Empleados", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            cedula = "001-1234567-8",
                            direccion = "Calle 123",
                            email = "juan.perez@email.com",
                            estado = "Activo",
                            fecha_contratacion = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            fecha_nacimiento = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            foto = "juan.jpg",
                            nombre = "Juan Pérez",
                            porcentaje_comision = 5.00m,
                            tanda_labor = "Matutina",
                            telefono = "809-555-1234"
                        },
                        new
                        {
                            Id = 2,
                            cedula = "002-2345678-9",
                            direccion = "Avenida Central 45",
                            email = "maria.martinez@email.com",
                            estado = "Activo",
                            fecha_contratacion = new DateTime(2019, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            fecha_nacimiento = new DateTime(1990, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            foto = "maria.jpg",
                            nombre = "María Martínez",
                            porcentaje_comision = 7.50m,
                            tanda_labor = "Vespertina",
                            telefono = "809-555-5678"
                        },
                        new
                        {
                            Id = 3,
                            cedula = "003-3456789-0",
                            direccion = "Calle Norte 78",
                            email = "pedro.gonzalez@email.com",
                            estado = "Activo",
                            fecha_contratacion = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            fecha_nacimiento = new DateTime(1987, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            foto = "pedro.jpg",
                            nombre = "Pedro González",
                            porcentaje_comision = 6.00m,
                            tanda_labor = "Nocturna",
                            telefono = "809-555-9101"
                        });
                });

            modelBuilder.Entity("TurboRentCar.Entities.Inspeccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CantidadCombustible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpleadosId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoGomas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TieneGato")
                        .HasColumnType("bit");

                    b.Property<bool>("TieneGomaRespuesta")
                        .HasColumnType("bit");

                    b.Property<bool>("TieneRalladuras")
                        .HasColumnType("bit");

                    b.Property<bool>("TieneRoturasCristal")
                        .HasColumnType("bit");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("int");

                    b.Property<int?>("VehiculoId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ClienteId1");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpleadosId");

                    b.HasIndex("VehiculoId");

                    b.HasIndex("VehiculoId1");

                    b.ToTable("Inspeccion", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CantidadCombustible = "Lleno",
                            ClienteId = 1,
                            EmpleadoId = 1,
                            Estado = "Pendiente",
                            EstadoGomas = "Buen estado",
                            Fecha = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TieneGato = true,
                            TieneGomaRespuesta = true,
                            TieneRalladuras = false,
                            TieneRoturasCristal = false,
                            VehiculoId = 1
                        },
                        new
                        {
                            Id = 2,
                            CantidadCombustible = "Medio tanque",
                            ClienteId = 2,
                            EmpleadoId = 2,
                            Estado = "Pendiente",
                            EstadoGomas = "Buen estado",
                            Fecha = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TieneGato = true,
                            TieneGomaRespuesta = true,
                            TieneRalladuras = true,
                            TieneRoturasCristal = true,
                            VehiculoId = 2
                        },
                        new
                        {
                            Id = 3,
                            CantidadCombustible = "Cuarto tanque",
                            ClienteId = 3,
                            EmpleadoId = 3,
                            Estado = "Pendiente",
                            EstadoGomas = "Buen estado",
                            Fecha = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TieneGato = true,
                            TieneGomaRespuesta = true,
                            TieneRalladuras = false,
                            TieneRoturasCristal = false,
                            VehiculoId = 3
                        },
                        new
                        {
                            Id = 4,
                            CantidadCombustible = "Lleno",
                            ClienteId = 4,
                            EmpleadoId = 1,
                            Estado = "Pendiente",
                            EstadoGomas = "Buen estado",
                            Fecha = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TieneGato = true,
                            TieneGomaRespuesta = true,
                            TieneRalladuras = true,
                            TieneRoturasCristal = true,
                            VehiculoId = 4
                        });
                });

            modelBuilder.Entity("TurboRentCar.Entities.Marcas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Marcas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Toyota",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Hyundai",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Kia",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Honda",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Nissan",
                            Estado = "Activo"
                        });
                });

            modelBuilder.Entity("TurboRentCar.Entities.Modelos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Modelos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Sedán",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "SUV",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Coupé",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Hatchback",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Pickup",
                            Estado = "Activo"
                        });
                });

            modelBuilder.Entity("TurboRentCar.Entities.RentaDevolucion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadDias")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaDevolucion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRenta")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontoPorDia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("RentaDevolucion", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CantidadDias = 2,
                            ClienteId = 1,
                            Comentario = "Renta de prueba",
                            EmpleadoId = 1,
                            Estado = "Activa",
                            FechaDevolucion = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRenta = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontoPorDia = 1000.00m,
                            VehiculoId = 1
                        },
                        new
                        {
                            Id = 2,
                            CantidadDias = 2,
                            ClienteId = 2,
                            Comentario = "Renta de prueba",
                            EmpleadoId = 2,
                            Estado = "Activa",
                            FechaDevolucion = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRenta = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontoPorDia = 1500.00m,
                            VehiculoId = 2
                        },
                        new
                        {
                            Id = 3,
                            CantidadDias = 2,
                            ClienteId = 3,
                            Comentario = "Renta de prueba",
                            EmpleadoId = 3,
                            Estado = "Activa",
                            FechaDevolucion = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRenta = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontoPorDia = 1200.00m,
                            VehiculoId = 3
                        },
                        new
                        {
                            Id = 4,
                            CantidadDias = 2,
                            ClienteId = 4,
                            Comentario = "Renta de prueba",
                            EmpleadoId = 1,
                            Estado = "Activa",
                            FechaDevolucion = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRenta = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontoPorDia = 2000.00m,
                            VehiculoId = 4
                        });
                });

            modelBuilder.Entity("TurboRentCar.Entities.TipoCombustible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoCombustible", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Gasolina",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Diesel",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Gas",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Híbrido",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Eléctrico",
                            Estado = "Activo"
                        });
                });

            modelBuilder.Entity("TurboRentCar.Entities.Tipos_Vehiculos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tipos_Vehiculos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Sedán",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Camioneta",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Jeepeta",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Furgoneta",
                            Estado = "Activo"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Microbús",
                            Estado = "Activo"
                        });
                });

            modelBuilder.Entity("TurboRentCar.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("TurboRentCar.Entities.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("MarcaId")
                        .HasColumnType("int");

                    b.Property<int>("ModeloId")
                        .HasColumnType("int");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TipoCombustibleId")
                        .HasColumnType("int");

                    b.Property<int>("TipoVehiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModeloId");

                    b.HasIndex("TipoCombustibleId");

                    b.HasIndex("TipoVehiculoId");

                    b.ToTable("Vehiculo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Estado = "Disponible",
                            MarcaId = 1,
                            ModeloId = 1,
                            Placa = "A123456",
                            TipoCombustibleId = 1,
                            TipoVehiculoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Estado = "Disponible",
                            MarcaId = 2,
                            ModeloId = 2,
                            Placa = "B234567",
                            TipoCombustibleId = 2,
                            TipoVehiculoId = 2
                        },
                        new
                        {
                            Id = 3,
                            Estado = "Disponible",
                            MarcaId = 3,
                            ModeloId = 3,
                            Placa = "C345678",
                            TipoCombustibleId = 3,
                            TipoVehiculoId = 3
                        },
                        new
                        {
                            Id = 4,
                            Estado = "Disponible",
                            MarcaId = 4,
                            ModeloId = 4,
                            Placa = "D456789",
                            TipoCombustibleId = 4,
                            TipoVehiculoId = 4
                        });
                });

            modelBuilder.Entity("TurboRentCar.Entities.Inspeccion", b =>
                {
                    b.HasOne("TurboRentCar.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboRentCar.Entities.Cliente", null)
                        .WithMany("Inspeccion")
                        .HasForeignKey("ClienteId1");

                    b.HasOne("TurboRentCar.Entities.Empleados", "Empleados")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboRentCar.Entities.Empleados", null)
                        .WithMany("Inspeccion")
                        .HasForeignKey("EmpleadosId");

                    b.HasOne("TurboRentCar.Entities.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboRentCar.Entities.Vehiculo", null)
                        .WithMany("Inspeccion")
                        .HasForeignKey("VehiculoId1");

                    b.Navigation("Cliente");

                    b.Navigation("Empleados");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("TurboRentCar.Entities.RentaDevolucion", b =>
                {
                    b.HasOne("TurboRentCar.Entities.Cliente", "Cliente")
                        .WithMany("RentaDevolucion")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboRentCar.Entities.Empleados", "Empleado")
                        .WithMany("RentaDevolucion")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboRentCar.Entities.Vehiculo", "Vehiculo")
                        .WithMany("RentaDevolucion")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("TurboRentCar.Entities.Vehiculo", b =>
                {
                    b.HasOne("TurboRentCar.Entities.Modelos", "Modelos")
                        .WithMany("Vehiculo")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculo_Modelos");

                    b.HasOne("TurboRentCar.Entities.TipoCombustible", "TipoCombustible")
                        .WithMany("Vehiculo")
                        .HasForeignKey("TipoCombustibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculo_TipoCombustible");

                    b.HasOne("TurboRentCar.Entities.Tipos_Vehiculos", "TipoVehiculo")
                        .WithMany("Vehiculo")
                        .HasForeignKey("TipoVehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelos");

                    b.Navigation("TipoCombustible");

                    b.Navigation("TipoVehiculo");
                });

            modelBuilder.Entity("TurboRentCar.Entities.Cliente", b =>
                {
                    b.Navigation("Inspeccion");

                    b.Navigation("RentaDevolucion");
                });

            modelBuilder.Entity("TurboRentCar.Entities.Empleados", b =>
                {
                    b.Navigation("Inspeccion");

                    b.Navigation("RentaDevolucion");
                });

            modelBuilder.Entity("TurboRentCar.Entities.Modelos", b =>
                {
                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("TurboRentCar.Entities.TipoCombustible", b =>
                {
                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("TurboRentCar.Entities.Tipos_Vehiculos", b =>
                {
                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("TurboRentCar.Entities.Vehiculo", b =>
                {
                    b.Navigation("Inspeccion");

                    b.Navigation("RentaDevolucion");
                });
#pragma warning restore 612, 618
        }
    }
}
